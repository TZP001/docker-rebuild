name: 重建Debian

on:
  repository_dispatch:
  workflow_dispatch:
  
env:
  DEBIAN_IMAGE: debian
  TAG: bullseye
  DIY_DIR: diy/debian
  DIY_SH: docker-entrypoint.sh
  WORKDIR: debian
  BRANCH: dist-amd64
  REPO_URL: https://github.com/debuerreotype/docker-debian-artifacts
  TZ: Asia/Shanghai
  
jobs:
  debianRebuild:
    runs-on: ubuntu-latest
    
    permissions:  #release权限
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 下载debian仓库
        run: |
          git clone -b ${BRANCH} ${REPO_URL} ${WORKDIR}
          
      # - name: 直接添加文件进内部
      #   run: |
      #     cd ${WORKDIR}
      #     cd ${TAG}
      #     echo "解压 rootfs.tar.xz 文件"
      #     mkdir -p tmp_tar_dir
      #     tar -xf rootfs.tar.xz -C tmp_tar_dir
      #     mkdir -p tmp_tar_dir/${DIY_DIR}
      #     cp $GITHUB_WORKSPACE/${DIY_DIR}/${DIY_SH} ./tmp_tar_dir/${DIY_DIR}/${DIY_SH}
      #     sudo chmod 755 ./tmp_tar_dir/${DIY_DIR}/${DIY_SH}
      #     cd tmp_tar_dir
      #     echo "重新打包 rootfs.tar.xz 文件"
      #     tar -cJf ../rootfs.tar.xz .

      - name: 添加启动脚本
        run: |
          cd ${WORKDIR}
          cd ${TAG}
          echo "修改默认启动命令"
          mkdir -p docker
          echo "!docker" >> .dockerignore
          cp $GITHUB_WORKSPACE/${DIY_DIR}/${DIY_SH} ./docker/${DIY_SH}
          sudo chmod 755 ./docker/${DIY_SH}
          sed -i '/CMD \[\"bash\"\]/d' ./Dockerfile
          echo "ADD docker/${DIY_SH} /" >> ./Dockerfile
          echo "WORKDIR /docker" >> ./Dockerfile
          echo "ENTRYPOINT [\"./${DIY_SH}\"]" >> ./Dockerfile
          echo CMD [\"bash\"] >> ./Dockerfile
          cat ./Dockerfile
          
      - name: 生成镜像
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.WORKDIR }}/${{ env.TAG }}
          push: false
          tags: ${{ env.DEBIAN_IMAGE }}_${{ env.TAG }}:${{ github.sha }}
          
      # - name: 生成TAG
      #   id: tag
      #   run: |
      #     echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
      #     echo "status=success" >> $GITHUB_OUTPUT

      # - name: 本地保存镜像
      #   id: save
      #   if: steps.tag.outputs.status == 'success' && !cancelled()
      #   run: |
      #     docker save ${DEBIAN_IMAGE}:${TAG}-rebuilt -o ${DEBIAN_IMAGE}-${TAG}-rebuilt.tar
      #     echo "UPLOAD_DIR=$PWD" >> $GITHUB_ENV
      #     echo "status=success" >> $GITHUB_OUTPUT
          
      # - name: 生成release
      #   uses: softprops/action-gh-release@v1
      #   if: steps.save.outputs.status == 'success' && !cancelled()
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{env.TAG}}-${{ env.release_tag }}
      #     files: ${{env.UPLOAD_DIR}}/${{env.DEBIAN_IMAGE}}:${{env.TAG}}-rebuilt.tar

      - name: 上传镜像
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEBIAN_IMAGE }}_${{ env.TAG }}.tar
          asset_name: ${{ env.DEBIAN_IMAGE }}_${{ env.TAG }}.tar
          asset_content_type: application/x-tar
