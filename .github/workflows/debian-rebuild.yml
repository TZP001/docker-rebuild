name: 重建Debian

on:
  repository_dispatch:
  workflow_dispatch:
  
env:
  DEBIAN_IMAGE: debian
  TAG: bullseye
  DIY_DIR: diy/debian
  DIY_SH: docker-entrypoint.sh
  WORKDIR: debian
  BRANCH: dist-amd64
  REPO_URL: https://github.com/debuerreotype/docker-debian-artifacts
  TZ: Asia/Shanghai
  
jobs:
  debianRebuild:
    runs-on: ubuntu-latest
    
    permissions:  #release权限
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: 下载debian仓库
        run: |
          git clone -b ${BRANCH} ${REPO_URL} ${WORKDIR}
          
      # - name: 直接添加文件进内部
      #   run: |
      #     cd ${WORKDIR}
      #     cd ${TAG}
      #     echo "解压 rootfs.tar.xz 文件"
      #     mkdir -p tmp_tar_dir
      #     tar -xf rootfs.tar.xz -C tmp_tar_dir
      #     mkdir -p tmp_tar_dir/${DIY_DIR}
      #     cp $GITHUB_WORKSPACE/${DIY_DIR}/${DIY_SH} ./tmp_tar_dir/${DIY_DIR}/${DIY_SH}
      #     sudo chmod 755 ./tmp_tar_dir/${DIY_DIR}/${DIY_SH}
      #     cd tmp_tar_dir
      #     echo "重新打包 rootfs.tar.xz 文件"
      #     tar -cJf ../rootfs.tar.xz .

      - name: 添加启动脚本
        run: |
          cd ${WORKDIR}
          cd ${TAG}
          echo "修改默认启动命令"
          mkdir -p docker
          echo "!docker" >> ./.dockerignore
          cp $GITHUB_WORKSPACE/${DIY_DIR}/${DIY_SH} ./docker/${DIY_SH}
          sed '/CMD \[\"bash\"\]/d' ./Dockerfile
          echo "RUN mkdir -p /docker" >> ./Dockerfile
          echo "WORKDIR /docker" >> ./Dockerfile
          echo "COPY ./docker /docker" >> ./Dockerfile
          echo "RUN chmod +x /docker/${DIY_SH}" >> ./Dockerfile
          echo "ENTRYPOINT [\"/docker/${DIY_SH}\"]" >> ./Dockerfile
          echo "CMD [\"bash\"]" >> ./Dockerfile
      
      - name: 生成镜像
        id: tag
        run: |
          cd ${WORKDIR}/${TAG}
          docker build -t ${DEBIAN_IMAGE}:${TAG}-rebuilt .
          docker save -o ${DEBIAN_IMAGE}:${TAG}-rebuilt.tar ${DEBIAN_IMAGE}:${TAG}-rebuilt
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "UPLOAD_DIR=$PWD" >> $GITHUB_ENV          
          
      - name: 生成release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.TAG}}-${{ steps.tag.outputs.release_tag }}
          files: ${{env.UPLOAD_DIR}}/${{env.DEBIAN_IMAGE}}:${{env.TAG}}-rebuilt.tar
